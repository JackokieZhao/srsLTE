name: C/C++ CI
on: push
jobs:
  x86_build:
    name: Build and test on x86
    strategy:
        matrix:
          cc: [ gcc ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build srsLTE on x86
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake libfftw3-dev libmbedtls-dev libpcsclite-dev libboost-program-options-dev libconfig++-dev libsctp-dev colordiff ninja-build valgrind
          mkdir build && cd build && cmake -GNinja .. && ninja && ctest -T memcheck
    
  aarch64_build:
    runs-on: ubuntu-18.04
    name: Build and test on aarch64
    steps:
    - name: Run some commands on arm64
      id: runcmd
      uses: uraimo/run-on-arch-action@master
      with:
        architecture: aarch64
        distribution: ubuntu18.04
        run: |
          apt update
          apt install -y build-essential
          uname -a > output.txt
          echo | gcc -v -E - 2>&1 | grep cc1 >> output.txt
          lscpu | grep "Model name:" | sed -r 's/Model name:\s{1,}//g' >> output.txt
          cat /proc/meminfo | grep MemTotal | sed -r 's/MemTotal:\s{1,}//g' >> output.txt
          echo ::set-output name=uname::$(uname -a)
          echo ::set-output name=cctarget::$(echo | gcc -v -E - 2>&1 | grep cc1)
          echo ::set-output name=cpuname::$(lscpu | grep "Model name:" | sed -r 's/Model name:\s{1,}//g')
          echo ::set-output name=memtotal::$(cat /proc/meminfo | grep MemTotal | sed -r 's/MemTotal:\s{1,}//g')
    - name: Get the output
      run: |
        echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
        echo "The gcc parameters were ${{ steps.runcmd.outputs.cctarget }}"
        echo "The cpu name was ${{ steps.runcmd.outputs.cpuname }}"
        echo "The total memory was ${{ steps.runcmd.outputs.memtotal }}"
    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: output
        path: output.txt
    
    - name: Build srsLTE on aarch64
      uses: uraimo/run-on-arch-action@master
      with:
        architecture: aarch64
        distribution: ubuntu18.04
        run: |
          apt update
          apt install -y build-essential cmake libfftw3-dev libmbedtls-dev libpcsclite-dev libboost-program-options-dev libconfig++-dev libsctp-dev colordiff ninja-build valgrind
          ls -l && pwd && mkdir build && cd build && cmake -GNinja .. && ninja && ctest -T memcheck
